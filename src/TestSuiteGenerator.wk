import WakeClass;
import WakeProperty;
import File;
import TestMethodFilterer;
import Map;

#>
# will generate a file which looks like
#
# every TestSuite is:
# 	needs YourFirstClassTest, YourSecondClassTest, YourThirdClassTest, TestResultReporter;
#	provides Asserts;
#	tests() {
#		var Asserts from this;
#		TestResultReporter.begin("YourFirstClassTest", "testFirstMethod");
#		YourFirstClassTest.testFirstMethod(Asserts);
#		TestResultReporter.end(Asserts);
#		// moar of these
#		TestResultReporter.report();
#	}
##
every TestSuiteGenerator is:

	needs TestMethodFilterer;

	write(WakeClass[])To(File) {
		foreach(WakeClass[]) {
			File.write("import " + WakeClass.classname + ";");
		}

		File.write("import System; import TestResultReporter; import Asserts; import Printer;");
		File.write("every TestSuite is: needs ");

		foreach(WakeClass[]) {
			File.write(WakeClass.classname);
			File.write(", ");
		}

		File.write("TestResultReporter; provides Asserts, Printer; tests() {");
		File.write("var Asserts from this;");

		foreach(WakeClass[]) {
			foreach(WakeClass.properties.getValues()) {
				if(!TestMethodFilterer.Is(WakeProperty)ATestMethod()) return;
				File.write("Asserts = Asserts from this;");
				File.write("TestResultReporter.begin(\"" + WakeClass.classname + "\", \"" + WakeProperty.classname + "\");");
				File.write(WakeClass.classname + "." + WakeProperty.classname + ";");
				File.write("TestResultReporter.end(Asserts);");
			}
		}

		File.write("TestResultReporter.report(); }");
	}
